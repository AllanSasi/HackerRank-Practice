/*
Samantha interviews many candidates from different colleges using coding challenges and contests. Write a query to print the contest_id, hacker_id, name, and the sums of total_submissions, total_accepted_submissions, total_views, and total_unique_views for each contest sorted by contest_id. Exclude the contest from the result if all four sums are 0.
Note: A specific contest can be used to screen candidates at more than one college, but each college only holds 1 screening contest.
The following tables hold interview data:
1. Contests: The contest_id is the id of the contest, hacker_id is the id of the hacker who created the contest, and name is the name of the hacker.
2. Colleges: The college_id is the id of the college, and contest_id is the id of the contest that Samantha used to screen the candidates.
3. Challenges: The challenge_id is the id of the challenge that belongs to one of the contests whose contest_id Samantha forgot, and college_id is the id of the college where the challenge was given to candidates.
4. View_Stats: The challenge_id is the id of the challenge, total_views is the number of times the challenge was viewed by candidates, and total_unique_views is the number of times the challenge was viewed by unique candidates.
5. Submission_Stats: The challenge_id is the id of the challenge, total_submissions is the number of submissions for the challenge, and total_accepted_submission is the number of submissions that achieved full scores.
*/
select x.contest_id, x.hacker_id, x.name, sum(total_submissions), sum(total_accepted_submissions), sum(total_views), sum(total_unique_views) from contests as x
join colleges as p on x.contest_id=p.contest_id
join challenges as m on p.college_id=m.college_id
left join (select challenge_id, sum(total_submissions) as total_submissions, sum(total_accepted_submissions) as total_accepted_submissions from submission_stats group by challenge_id) as a on m.challenge_id=a.challenge_id
left join (select challenge_id, sum(total_views) as total_views, sum(total_unique_views) as total_unique_views from view_stats group by challenge_id) as b on m.challenge_id=b.challenge_id
group by x.contest_id, x.hacker_id, x.name
having sum(total_submissions)+sum(total_accepted_submissions)+sum(total_views)+sum(total_unique_views)>0
order by x.contest_id
